#!/usr/bin/env python3
"""
ATOM-GPT Configuration Helper
Helps users set up their environment variables for LM Studio and server configuration.
"""

import os
import sys

def create_env_file():
    """Create a .env file with user-specified configuration"""
    
    print("üé∏ ATOM-GPT Configuration Helper")
    print("=" * 50)
    print("This script will help you configure LM Studio and server settings.")
    print()
    
    # Get LM Studio configuration
    print("üì° LM Studio Configuration")
    print("-" * 30)
    
    lm_studio_url = input("Enter LM Studio URL [http://localhost:1234]: ").strip()
    if not lm_studio_url:
        lm_studio_url = "http://localhost:1234"
    
    lm_studio_fallback = input("Enter LM Studio fallback URL [http://localhost:8080]: ").strip()
    if not lm_studio_fallback:
        lm_studio_fallback = "http://localhost:8080"
    
    print()
    
    # Get server configuration
    print("üñ•Ô∏è Server Configuration")
    print("-" * 30)
    
    flask_port = input("Enter Flask server port [8000]: ").strip()
    if not flask_port:
        flask_port = "8000"
    
    flask_host = input("Enter Flask server host [0.0.0.0]: ").strip()
    if not flask_host:
        flask_host = "0.0.0.0"
    
    cors_origins = input("Enter CORS origins [http://localhost:3000,http://localhost:3001]: ").strip()
    if not cors_origins:
        cors_origins = "http://localhost:3000,http://localhost:3001"
    
    print()
    
    # Create .env content
    env_content = f"""# ATOM-GPT Configuration
# Generated by configure.py

# LM Studio Configuration
LM_STUDIO_URL={lm_studio_url}
LM_STUDIO_FALLBACK_URL={lm_studio_fallback}

# Backend Server Configuration
FLASK_PORT={flask_port}
FLASK_HOST={flask_host}
FLASK_DEBUG=true

# Model Configuration
MODEL_PATH=backend/training/out-darklyrics/
FALLBACK_COMPLETIONS=true

# CORS Configuration (comma-separated origins)
CORS_ORIGINS={cors_origins}
"""
    
    # Write .env file
    try:
        with open('.env', 'w') as f:
            f.write(env_content)
        
        print("‚úÖ Configuration saved to .env file!")
        print()
        print("üìã Summary:")
        print(f"   LM Studio URL: {lm_studio_url}")
        print(f"   LM Studio Fallback: {lm_studio_fallback}")
        print(f"   Server: http://{flask_host}:{flask_port}")
        print(f"   CORS Origins: {cors_origins}")
        print()
        print("üöÄ You can now start the backend server:")
        print("   cd backend/api && python server.py")
        
    except Exception as e:
        print(f"‚ùå Error creating .env file: {e}")
        return False
    
    return True

def main():
    """Main configuration function"""
    
    # Check if .env already exists
    if os.path.exists('.env'):
        print("‚ö†Ô∏è  .env file already exists!")
        response = input("Do you want to overwrite it? (y/N): ").strip().lower()
        if response not in ['y', 'yes']:
            print("Configuration cancelled.")
            return
        print()
    
    # Create the configuration
    if create_env_file():
        print()
        print("üéâ Configuration complete! Your ATOM-GPT setup is ready.")
    else:
        print("‚ùå Configuration failed. Please check permissions and try again.")
        sys.exit(1)

if __name__ == "__main__":
    main()
